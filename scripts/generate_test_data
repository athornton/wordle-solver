#!/usr/bin/env python3
"""
Create all the test data we need.
"""

from os import mkdir
from os.path import dirname, join, realpath
from string import ascii_lowercase
from urllib.request import urlopen

# The word frequency file is under the MIT license
WORD_FREQUENCY_URL = "https://norvig.com/ngrams/count_1w.txt"


class TestDataFactory:
    """
    Not intended to be flexible.
    """

    # pylint: disable="invalid-name"

    def __init__(self):
        self.datadir: str = ""
        self.word_frequency: list[str] = []
        self.char_frequency: dict[str, float] = {}
        self.primes: list[int] = []

    def produce_data(self) -> None:
        """
        This generates all our data sets.
        """
        self.create_target_dir()
        self.get_word_frequency_data()
        self.get_char_frequency_data()
        self.generate_primel_data()
        self.write_word_frequency_data()
        self.write_std_char_frequency_data()
        self.write_flat_char_frequency_data()
        self.write_primel_data()
        self.write_mastermind_data()

    def create_target_dir(self) -> None:
        """
        Set up our landing zone.

        We assume we live in the 'scripts' directory of the project.
        """
        self.datadir = realpath(
            join(dirname(__file__), "..", "tests", "static")
        )
        try:
            mkdir(self.datadir)
        except FileExistsError:
            pass

    def get_word_frequency_data(self) -> None:
        """
        Pull down the data from Peter Norvig's site.
        """
        with urlopen(WORD_FREQUENCY_URL) as r:
            data = r.read()  # We know it's on the order of 5MB
        text = data.decode("utf-8")
        lines = text.split("\n")
        self.word_frequency = lines

    def get_char_frequency_data(self) -> None:
        """
        Import the standard letter frequency data from
        https://en.wikipedia.org/wiki/Letter_frequency
        (using Frequency in Texts)
        """
        self.char_frequency = {
            "a": 8.2,
            "b": 1.5,
            "c": 2.8,
            "d": 4.3,
            "e": 13.0,
            "f": 2.2,
            "g": 2.0,
            "h": 6.1,
            "i": 7.0,
            "j": 0.15,
            "k": 0.77,
            "l": 4.0,
            "m": 2.5,
            "n": 6.7,
            "o": 7.5,
            "p": 1.9,
            "q": 0.095,
            "r": 6.0,
            "s": 6.3,
            "t": 9.1,
            "u": 2.8,
            "v": 0.98,
            "w": 2.4,
            "x": 0.15,
            "y": 2.0,
            "z": 0.074,
        }

    def generate_primel_data(self) -> None:
        """
        Generate all primes up to 99999; keep all the five-digit ones.

        This is a straightforward implementation of the Sieve of Eratosthenes.

        The list of numbers is for playing Primel:
        https://converged.yt/primel/
        """
        pbool = [True for i in range(100000)]
        # OK, not that it matters.  We're going to throw out anything smaller
        # than 10000 anyway.  It's just my OCD talking.
        pbool[0] = False
        pbool[1] = False
        p = 2
        while p * p < 100000:
            if pbool[p]:
                # Only mark things we still think are primes
                for i in range(p * p, 100000, p):
                    # Mark its multiples as non-prime
                    pbool[i] = False
            p += 1
        self.primes = [x for x in range(10000, 100000) if pbool[x]]

    def write_word_frequency_data(self) -> None:
        """
        Write data from Peter Norvig's frequency count.
        """
        keepfives = 1000
        keepsixes = 800
        fives = 0
        sixes = 0
        ffname = join(self.datadir, f"5x{keepfives}")
        sfname = join(self.datadir, f"6x{keepsixes}")
        with open(f"{ffname}.txt", "w", encoding="utf-8") as ft:
            with open(f"{ffname}.freq", "w", encoding="utf-8") as ff:
                with open(f"{sfname}.txt", "w", encoding="utf-8") as st:
                    with open(f"{sfname}.freq", "w", encoding="utf-8") as sf:
                        for line in self.word_frequency:
                            fields = line.lower().split()
                            word, count = fields[0], fields[1]
                            if len(word) == 5 and fives < keepfives:
                                ft.write(f"{word}\n")
                                ff.write(f"{word} {count}\n")
                                fives += 1
                            if len(word) == 6 and sixes < keepsixes:
                                st.write(f"{word}\n")
                                sf.write(f"{word} {count}\n")
                                sixes += 1
                            if fives >= keepfives and sixes >= keepsixes:
                                return

    def write_std_char_frequency_data(self) -> None:
        """
        Write data from https://en.wikipedia.org/wiki/Letter_frequency
        (using Frequency in Texts)
        """
        # pylint: disable=consider-using-dict-items
        with open(
            join(self.datadir, "standard.freq"), "w", encoding="utf-8"
        ) as f:
            for letter in self.char_frequency:
                intfreq = int(1000 * self.char_frequency[letter])
                f.write(f"{letter} {intfreq}\n")

    def write_flat_char_frequency_data(self) -> None:
        """
        Write file that pretends all letters are equally common.
        """
        with open(join(self.datadir, "flat.freq"), "w", encoding="utf-8") as f:
            for letter in ascii_lowercase:
                f.write(f"{letter} 1\n")

    def write_primel_data(self) -> None:
        """
        Write list of five-digit primes for playing Primel.
        https://converged.yt/primel/
        """
        with open(
            join(self.datadir, "primel.txt"), "w", encoding="utf-8"
        ) as f:
            for p in self.primes:
                f.write(f"{p}\n")

    def write_mastermind_data(self) -> None:
        """
        Possible Mastermind guesses (4 digits in 1-6).
        """
        with open(
            join(self.datadir, "mastermind.txt"), "w", encoding="utf-8"
        ) as f:
            for a in range(1, 7):
                for b in range(1, 7):
                    for c in range(1, 7):
                        for d in range(1, 7):
                            f.write(f"{a}{b}{c}{d}\n")


if __name__ == "__main__":
    factory = TestDataFactory()
    factory.produce_data()
